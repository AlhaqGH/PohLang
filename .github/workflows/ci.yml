name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'sdk-v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pytest build
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run tests
        run: |
          python -m pytest -q || python -m unittest discover -s tests_python -v
      - name: Interpreter smoke test
        run: |
          echo 'Write "Hello from CI"' > hello_ci.poh
          python -m Interpreter.run_poh hello_ci.poh
          rm hello_ci.poh

  build-runtime:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Build runtime (release)
        run: |
          cargo build --release --manifest-path runtime-rs/Cargo.toml
      - name: Collect artifact
        shell: bash
        run: |
          mkdir -p out
          case "${{ matrix.os }}" in
            windows-latest)
              cp runtime-rs/target/release/pohlangc.exe out/pohlangc-windows.exe
              ;;
            ubuntu-latest)
              cp runtime-rs/target/release/pohlangc out/pohlangc-linux
              chmod +x out/pohlangc-linux
              ;;
            macos-latest)
              cp runtime-rs/target/release/pohlangc out/pohlangc-macos
              chmod +x out/pohlangc-macos
              ;;
          esac
      - name: Upload runtime artifact
        uses: actions/upload-artifact@v4
        with:
          name: runtime-${{ matrix.os }}
          path: out/

  package:
    needs: [test, build-runtime]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/sdk-v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Extract version from tag
        id: version
        run: |
          echo "version=${GITHUB_REF_NAME#sdk-v}" >> $GITHUB_OUTPUT
      - name: Download runtime artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: runtime-*
          merge-multiple: true
          path: runtime-binaries
      - name: Arrange cross-platform binaries
        run: |
          mkdir -p bin/linux bin/windows bin/macos
          if [ -f runtime-binaries/pohlangc-linux ]; then cp runtime-binaries/pohlangc-linux bin/linux/pohlangc; chmod +x bin/linux/pohlangc; fi
          if [ -f runtime-binaries/pohlangc-windows.exe ]; then cp runtime-binaries/pohlangc-windows.exe bin/windows/pohlangc.exe; fi
          if [ -f runtime-binaries/pohlangc-macos ]; then cp runtime-binaries/pohlangc-macos bin/macos/pohlangc; chmod +x bin/macos/pohlangc; fi
      - name: Build Python package
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build
      - name: Create SDK bundle (versioned folder)
        run: |
          set -e
          SDK_DIR="pohlang-sdk-${{ steps.version.outputs.version }}"
          mkdir -p "$SDK_DIR"

          # Core components
          [ -d Interpreter ] && cp -r Interpreter "$SDK_DIR/"
          [ -d lib ] && cp -r lib "$SDK_DIR/"
          [ -d bin ] && cp -r bin "$SDK_DIR/"
          # component removed from the project
          [ -d examples ] && cp -r examples "$SDK_DIR/" || true
          [ -d doc ] && cp -r doc "$SDK_DIR/" || true

          # Docs and metadata
          [ -f README.md ] && cp README.md "$SDK_DIR/"
          [ -f CHANGELOG.md ] && cp CHANGELOG.md "$SDK_DIR/"
          [ -f PohLang_Guide.md ] && cp PohLang_Guide.md "$SDK_DIR/" || true
          [ -f LICENSE ] && cp LICENSE "$SDK_DIR/" || true
          printf "%s" "${{ steps.version.outputs.version }}" > "$SDK_DIR/VERSION"

          # Archives
          tar -czf "$SDK_DIR.tar.gz" "$SDK_DIR"
          zip -r "$SDK_DIR.zip" "$SDK_DIR"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pohlang-sdk-${{ steps.version.outputs.version }}
          path: |
            pohlang-sdk-${{ steps.version.outputs.version }}.zip
            pohlang-sdk-${{ steps.version.outputs.version }}.tar.gz
            dist/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
            pohlang-sdk-${{ steps.version.outputs.version }}.zip
            pohlang-sdk-${{ steps.version.outputs.version }}.tar.gz
          name: PohLang SDK v${{ steps.version.outputs.version }}
          generate_release_notes: true
