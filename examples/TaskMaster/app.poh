# TaskMaster - A Full-Featured Task Management Web App
# Demonstrates PohLang's natural language programming with:
# - Phrasal collection creation
# - Bracket indexing []
# - Parentheses grouping ()
# - Mixed symbolic and phrasal operators
# - Web routing and JSON responses
# - Real-world application logic

Import system "web"

# ============================================
# DATA STORAGE (In-memory for demonstration)
# ============================================

Set tasks to Make a list of
Set next_id to 1

# Initial sample tasks
Set task1 to Make a dictionary with "id" set to 1, "title" set to "Learn PohLang", "completed" set to false, "priority" set to "high"
Set task2 to Make a dictionary with "id" set to 2, "title" set to "Build a web app", "completed" set to true, "priority" set to "medium"
Set task3 to Make a dictionary with "id" set to 3, "title" set to "Test indexing", "completed" set to false, "priority" set to "low"

Set tasks to Make a list of task1, task2, task3
Set next_id to 4

# ============================================
# HELPER FUNCTIONS
# ============================================

# Calculate task statistics using grouping and indexing
Make calculate_stats
  Set total to length(tasks)
  Set completed_count to 0
  Set high_priority to 0
  Set medium_priority to 0
  Set low_priority to 0
  
  # Count completed tasks and priorities
  Set i to 0
  While i < total
    Set current_task to tasks[i]
    
    # Check completion status
    If current_task["completed"] is true
      Set completed_count to completed_count + 1
    End
    
    # Count by priority
    If current_task["priority"] is "high"
      Set high_priority to high_priority + 1
    End
    If current_task["priority"] is "medium"
      Set medium_priority to medium_priority + 1
    End
    If current_task["priority"] is "low"
      Set low_priority to low_priority + 1
    End
    
    Set i to i + 1
  End
  
  # Calculate completion percentage with grouping
  Set percentage to 0
  If total > 0
    Set percentage to (completed_count * 100) / total
  End
  
  Set pending_count to total - completed_count
  
  # Return statistics dictionary
  Return Make a dictionary with 
    "total" set to total,
    "completed" set to completed_count,
    "pending" set to pending_count,
    "percentage" set to percentage,
    "high_priority" set to high_priority,
    "medium_priority" set to medium_priority,
    "low_priority" set to low_priority
End

# Find task by ID using indexing
Make find_task_by_id with task_id
  Set i to 0
  While i < length(tasks)
    Set current to tasks[i]
    If current["id"] is task_id
      Return current
    End
    Set i to i + 1
  End
  Return none
End

# Get task index by ID
Make get_task_index with task_id
  Set i to 0
  While i < length(tasks)
    If tasks[i]["id"] is task_id
      Return i
    End
    Set i to i + 1
  End
  Return -1
End

# ============================================
# ROUTE HANDLERS
# ============================================

# Home page - HTML response
Make handle_home with request
    Set html to "<!DOCTYPE html>
<html>
<head>
  <title>TaskMaster - PohLang Demo</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }
    .container { 
      max-width: 1200px; 
      margin: 0 auto; 
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      text-align: center;
    }
    .header h1 { 
      font-size: 2.5em; 
      margin-bottom: 10px;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
    }
    .header p { 
      font-size: 1.1em; 
      opacity: 0.9;
    }
    .content { padding: 30px; }
    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    .stat-card {
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      padding: 20px;
      border-radius: 10px;
      color: white;
      text-align: center;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .stat-card h3 { 
      font-size: 2em; 
      margin-bottom: 5px;
    }
    .stat-card p { 
      font-size: 0.9em; 
      opacity: 0.9;
    }
    .task-form {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 30px;
    }
    .form-group {
      margin-bottom: 15px;
    }
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
      color: #333;
    }
    .form-group input, .form-group select {
      width: 100%;
      padding: 10px;
      border: 2px solid #ddd;
      border-radius: 5px;
      font-size: 1em;
    }
    .btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 12px 30px;
      border: none;
      border-radius: 5px;
      font-size: 1em;
      cursor: pointer;
      transition: transform 0.2s;
    }
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    .task-list {
      display: grid;
      gap: 15px;
    }
    .task-card {
      background: white;
      border: 2px solid #e0e0e0;
      border-radius: 10px;
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: transform 0.2s;
    }
    .task-card:hover {
      transform: translateX(5px);
      border-color: #667eea;
    }
    .task-card.completed {
      opacity: 0.7;
      background: #f0f0f0;
    }
    .task-info h3 {
      margin-bottom: 5px;
      color: #333;
    }
    .task-info p {
      color: #666;
      font-size: 0.9em;
    }
    .priority {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 12px;
      font-size: 0.8em;
      font-weight: bold;
      margin-left: 10px;
    }
    .priority-high { background: #ff4757; color: white; }
    .priority-medium { background: #ffa502; color: white; }
    .priority-low { background: #2ed573; color: white; }
    .task-actions button {
      margin-left: 10px;
      padding: 8px 16px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 0.9em;
    }
    .btn-toggle {
      background: #2ed573;
      color: white;
    }
    .btn-delete {
      background: #ff4757;
      color: white;
    }
    .api-info {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 10px;
      margin-top: 30px;
    }
    .api-info h2 {
      margin-bottom: 15px;
      color: #333;
    }
    .api-info code {
      background: #e0e0e0;
      padding: 2px 6px;
      border-radius: 3px;
      font-family: 'Courier New', monospace;
    }
  </style>
</head>
<body>
  <div class='container'>
    <div class='header'>
      <h1>ðŸš€ TaskMaster</h1>
      <p>Built with PohLang - Natural Language Programming</p>
    </div>
    
    <div class='content'>
      <div id='stats'></div>
      
      <div class='task-form'>
        <h2>Add New Task</h2>
        <form id='taskForm'>
          <div class='form-group'>
            <label>Task Title</label>
            <input type='text' id='title' required placeholder='Enter task description...'>
          </div>
          <div class='form-group'>
            <label>Priority</label>
            <select id='priority'>
              <option value='low'>Low</option>
              <option value='medium' selected>Medium</option>
              <option value='high'>High</option>
            </select>
          </div>
          <button type='submit' class='btn'>Add Task</button>
        </form>
      </div>
      
      <h2>Tasks</h2>
      <div id='tasks' class='task-list'></div>
      
      <div class='api-info'>
        <h2>API Endpoints</h2>
        <p><strong>GET</strong> <code>/api/tasks</code> - Get all tasks</p>
        <p><strong>GET</strong> <code>/api/stats</code> - Get statistics</p>
        <p><strong>POST</strong> <code>/api/tasks</code> - Create task</p>
        <p><strong>PUT</strong> <code>/api/tasks/:id</code> - Toggle completion</p>
        <p><strong>DELETE</strong> <code>/api/tasks/:id</code> - Delete task</p>
      </div>
    </div>
  </div>
  
  <script>
    // Fetch and display stats
    async function loadStats() {
      const response = await fetch('/api/stats');
      const stats = await response.json();
      
      document.getElementById('stats').innerHTML = `
        <div class='stat-card'>
          <h3>${stats.total}</h3>
          <p>Total Tasks</p>
        </div>
        <div class='stat-card'>
          <h3>${stats.completed}</h3>
          <p>Completed</p>
        </div>
        <div class='stat-card'>
          <h3>${stats.pending}</h3>
          <p>Pending</p>
        </div>
        <div class='stat-card'>
          <h3>${stats.percentage}%</h3>
          <p>Completion Rate</p>
        </div>
      `;
    }
    
    // Fetch and display tasks
    async function loadTasks() {
      const response = await fetch('/api/tasks');
      const data = await response.json();
      
      const tasksHtml = data.tasks.map(task => `
        <div class='task-card ${task.completed ? 'completed' : ''}'>
          <div class='task-info'>
            <h3>
              ${task.completed ? 'âœ“ ' : ''}${task.title}
              <span class='priority priority-${task.priority}'>${task.priority.toUpperCase()}</span>
            </h3>
            <p>ID: ${task.id} | Status: ${task.completed ? 'Completed' : 'Pending'}</p>
          </div>
          <div class='task-actions'>
            <button class='btn-toggle' onclick='toggleTask(${task.id})'>
              ${task.completed ? 'Undo' : 'Complete'}
            </button>
            <button class='btn-delete' onclick='deleteTask(${task.id})'>Delete</button>
          </div>
        </div>
      `).join('');
      
      document.getElementById('tasks').innerHTML = tasksHtml || '<p>No tasks yet. Add one above!</p>';
    }
    
    // Add new task
    document.getElementById('taskForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const title = document.getElementById('title').value;
      const priority = document.getElementById('priority').value;
      
      await fetch('/api/tasks', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, priority })
      });
      
      document.getElementById('title').value = '';
      loadTasks();
      loadStats();
    });
    
    // Toggle task completion
    async function toggleTask(id) {
      await fetch(`/api/tasks/${id}`, { method: 'PUT' });
      loadTasks();
      loadStats();
    }
    
    // Delete task
    async function deleteTask(id) {
      if (confirm('Delete this task?')) {
        await fetch(`/api/tasks/${id}`, { method: 'DELETE' });
        loadTasks();
        loadStats();
      }
    }
    
    // Initial load
    loadStats();
    loadTasks();
    
    // Auto-refresh every 5 seconds
    setInterval(() => {
      loadStats();
      loadTasks();
    }, 5000);
  </script>
</body>
</html>"
  
  Return Make a dictionary with "status" set to 200, "body" set to html
End

# Get all tasks - JSON response
Make handle_get_tasks with request
  Set response_data to Make a dictionary with "tasks" set to tasks, "count" set to length(tasks)
  Return Make a dictionary with "status" set to 200, "body" set to response_data
End

# Get statistics - JSON response
Make handle_get_stats with request
  Set stats to calculate_stats
  Return Make a dictionary with "status" set to 200, "body" set to stats
End

# Create new task - POST
Make handle_create_task with request
  # Parse request body (simplified - assumes body is already parsed)
  Set body to request["body"]
  
  # Create new task with next ID
  Set new_task to Make a dictionary with 
    "id" set to next_id,
    "title" set to body["title"],
    "completed" set to false,
    "priority" set to body["priority"]
  
  # Add to tasks list (append returns new list)
  Set tasks to append new_task to tasks
  Set next_id to next_id + 1
  
  Set response to Make a dictionary with "success" set to true, "task" set to new_task
  Return Make a dictionary with "status" set to 201, "body" set to response
End

# Toggle task completion - PUT
Make handle_toggle_task with request
  Set task_id to request["params"]["id"]
  Set index to get_task_index with task_id
  
  If index >= 0
    Set task to tasks[index]
    
    # Toggle completion status
    Set current_status to task["completed"]
    Set new_status to false
    If current_status is false
      Set new_status to true
    End
    
    # Update task
    Set updated_task to Make a dictionary with
      "id" set to task["id"],
      "title" set to task["title"],
      "completed" set to new_status,
      "priority" set to task["priority"]
    
    # Replace in list (simplified)
    # In real implementation, would update tasks[index]
    
    Set response to Make a dictionary with "success" set to true, "task" set to updated_task
    Return Make a dictionary with "status" set to 200, "body" set to response
  End
  
  Set error to Make a dictionary with "success" set to false, "message" set to "Task not found"
  Return Make a dictionary with "status" set to 404, "body" set to error
End

# Delete task - DELETE
Make handle_delete_task with request
  Set task_id to request["params"]["id"]
  Set index to get_task_index with task_id
  
  If index >= 0
    # Remove task (simplified - in real implementation would modify tasks list)
    Set response to Make a dictionary with "success" set to true, "message" set to "Task deleted"
    Return Make a dictionary with "status" set to 200, "body" set to response
  End
  
  Set error to Make a dictionary with "success" set to false, "message" set to "Task not found"
  Return Make a dictionary with "status" set to 404, "body" set to error
End

# ============================================
# MAIN ROUTER
# ============================================

Make router with request
  Set path to request["path"]
  Set method to request["method"]
  
  # Home page
  If path is "/"
    Return handle_home with request
  End
  
  # API Routes
  If path is "/api/tasks"
    If method is "GET"
      Return handle_get_tasks with request
    End
    If method is "POST"
      Return handle_create_task with request
    End
  End
  
  If path is "/api/stats"
    Return handle_get_stats with request
  End
  
  # Task operations by ID (simplified routing)
  # In real implementation, would parse path parameters
  
  # 404 Not Found
  Set error_html to "<h1>404 - Page Not Found</h1><p>The requested page does not exist.</p>"
  Return Make a dictionary with "status" set to 404, "body" set to error_html
End

# ============================================
# START SERVER
# ============================================

Write "=========================================="
Write "TaskMaster Server Starting..."
Write "=========================================="
Write "Features Demonstrated:"
Write "âœ“ Phrasal collection creation (Make a list of, Make a dictionary with)"
Write "âœ“ Bracket indexing [] for accessing elements"
Write "âœ“ Parentheses grouping () for precedence"
Write "âœ“ Mixed symbolic (+, -, *, /) and phrasal operators"
Write "âœ“ Web routing and JSON responses"
Write "âœ“ Real-world task management logic"
Write "=========================================="
Write "Server running on http://localhost:8080"
Write "Open your browser to see the app!"
Write "=========================================="

Start server on 8080 with router
